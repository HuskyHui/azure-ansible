- name: Check whether the install path exists
  stat: path="{{ install_data_path }}"
  register: inst_path

- name: Create installation directory if not exists
  file:
    path: "{{ install_data_path }}"
    state: directory
    mode: 0777
  when: not inst_path.stat.exists

- name: Check for last download run
  stat: path="{{ install_data_path }}/dnld_flag"
  register: dnld_flag

- block:
#  - name: Download Files from http repo
#    get_url: url="{{ repo_url }}{{ item }}" dest="{{ install_data_path }}" force=no tmp_dest="{{ install_data_path }}"
#    when: repo_type == "http"
#    with_items: "{{ netweaver_downloads }}"
#  
#  - name: Download Files from s3 repo
#    s3:
#      bucket: "{{ s3_bucket }}"
#      object: "{{ item }}"
#      dest: "{{ install_data_path }}/{{ item.split('/')[-1] }}"
#      mode: get
#      region: "{{ ec2_region }}"
#      ignore_nonexistent_bucket: True
#    when: repo_type == "s3"
#    with_items: "{{ netweaver_downloads }}"
  - name: create mount point
    file:
      path: /mnt/media
      state: directory
      mode: 0777
       

  - name: mount the packages
    shell:
      mount -t cifs //ansiblepoceuw.file.core.windows.net/sapsoftware /mnt/media -o vers=3.0,username=ansiblepoceuw,password=FoR+acF65aPr2RLaLrFB832wXduHqEevFmYFwHGq9cR0JMRHe4JtGXi9IWoWkRoQ+s09auh4qdd5sAK92960aQ==,dir_mode=0777,file_mode=0777,sec=ntlmssp

  - name: copy required packages
    copy:
      src: "/mnt/media/{{ item }}"
      dest: "{{ install_data_path }}"
      remote_src: yes
    with_items: "{{ netweaver_downloads }}"


  - name: Set Downloadfile
    file: path="{{ install_data_path }}/dnld_flag"  state=touch mode="u=rw,g=r,o=r"

  tags:
    - netw_download
  when: not dnld_flag.stat.exists and repo_type in ["mount"]

- name: Check for last extract run
  stat: path="{{ install_data_path }}/ext_flag"
  register: ext_flag

- block:
  - name: chmod sapcar
    file: path="{{ install_data_path }}/SAPCAR" owner=root group=sapinst mode=0775
  
  - name: extract sar archives 
    shell: "cd {{ install_data_path }} && ./SAPCAR -xvf {{ item }}"
    with_items:
      - "{{ netweaver_export_archive }}"
      - "{{ sapkernel_archive }}"
      - "{{ swpm_archive }}"
      - "{{ hdb_client_archive }}"
    when: item.split('.')[-1]|lower == "sar"

  - name: extract zip archives 
    unarchive:
      src: "{{ install_data_path }}/{{ item }}"
      dest: "{{ install_data_path }}"
      remote_src: yes
    with_items:
      - "{{ netweaver_export_archive }}"
      - "{{ sapkernel_archive }}"
      - "{{ swpm_archive }}"
      - "{{ hdb_client_archive }}"
    when: item.split('.')[-1]|lower == "zip"

  - name: Set permissions to install folder
    file: path="{{ install_data_path }}" owner=root group=sapinst mode=0775 recurse=yes

  - name: Set Extract flag
    file: path="{{ install_data_path }}/ext_flag" state=touch mode="u=rw,g=r,o=r"

  tags:
    - netw_install
  when: not ext_flag.stat.exists and repo_type in ["mount"]

- name: Check for last installation
  stat: path="{{ install_data_path }}/inst_flag"
  register: inst_flag

- block:
  - name: Setting config file with SID,Hostname,InstanceNumber and Passwords etc
    template: src=netw75_config.j2 dest="{{ install_config_file }}" owner=root group=sapinst mode=0640
  
  - name: Running Netweaver installer
    shell: "su - -c 'cd {{ install_log_path }} && HDB_MASSIMPORT=YES {{ swpm_bin }} SAPINST_USE_HOSTNAME={{ virtual_hostname }} SAPINST_INPUT_PARAMETERS_URL={{ install_config_file }} SAPINST_EXECUTE_PRODUCT_ID=NW_ABAP_OneHost:NW750.HDB.ABAP SAPINST_SKIP_DIALOGS=true SAPINST_SLP_MODE=false'"

  - name: Set install flag
    file: path="{{ install_data_path }}/inst_flag"  state=touch mode="u=rw,g=r,o=r"

  tags:
    - netw_install
  when: not inst_flag.stat.exists

# should be later moved to separate role and to top level playbook

- name: Unmount install mount
  mount:
    path: "{{ item }}"
    state: unmounted
  with_items:
    - "{{ install_data_path }}"
    - "/mnt{{ install_data_path }}"
  when: repo_type in ["mount"]

- name: Unmount install mount
  mount:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ install_data_path }}"
    - "/mnt{{ install_data_path }}"
  when: repo_type in ["mount"]

- name: Umount software packages
  mount:
    path: /mnt/media
    state: unmounted

